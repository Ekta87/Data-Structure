// Program to Modify a Circular Linked List such that each node stores the sum of all nodes
// except itself

#include <stdio.h>
#include <stdlib.h>

struct node
{
    int info;
    struct node *next;
};
struct node *GetNode()
{
    struct node *p;
    p = (struct node *)malloc(sizeof(struct node));
    return p;
}
void InsBeg(struct node **cstart, int x)
{
    struct node *p;
    p = GetNode();
    p->info = x;

    if ((*cstart) != NULL)
    {
        p->next = (*cstart)->next;
        (*cstart)->next = p;
    }
    else
    {
        (*cstart) = p;
        (*cstart)->next = (*cstart);
    }
}

void ctraverse(struct node *cstart)
{
    struct node *p, *q;
    p = cstart;
    q = cstart->next;
    while (q != p)
    {
        printf("%d  ", q->info);
        q = q->next;
    }
    printf("%d  ", p->info);
    printf("\n");
}
int pattern(struct node **cstart)
{
    struct node *p, *r, *q;
    p = (*cstart);
    r = (*cstart)->next;
    int sum = 0;
    while (r != p)
    {
        sum = sum + r->info;
        r = r->next;
    }
    sum = sum + r->info;
    q = (*cstart)->next;
    while (q != p)
    {
        q->info = sum - (q->info);
        q = q->next;
    }
    q->info = sum - (q->info);

    ctraverse(*cstart);
}

int main()
{
    struct node *start;
    start = NULL;
    InsBeg(&start, 30);
    InsBeg(&start, 70);
    InsBeg(&start, 50);
    InsBeg(&start, 10);
    printf("Linked list before insertion: ");
    ctraverse(start);

    printf("Pattern Output: ");
    pattern(&start);

    return 0;
}
